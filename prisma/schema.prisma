// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          String       @id @default(uuid())
  fullName    String       @db.VarChar(255)
  email       String       @unique @db.VarChar(255)
  phoneNumber String       @db.VarChar(255)
  password    String       @db.VarChar(255)
  loggedInAs  Role         @default(USER)
  parentId    String? // Self-reference
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  folders     Folders[]
  files       Files[]
  auditLog    AuditLog[]
  permission  Permission[]
}

enum Role {
  USER
  ADMIN
}

model Folders {
  id        String     @id @default(uuid())
  name      String
  fullPath  String? // Path to the folder
  parentId  String? // Self-reference
  parent    Folders?   @relation("FolderToSubfolders", fields: [parentId], references: [id], onDelete: Cascade)
  children  Folders[]  @relation("FolderToSubfolders") // Subfolders for self-referencing
  files     Files[] // Files in this folder
  usersId   String
  user      Users      @relation(fields: [usersId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  AuditLog  AuditLog[]
}

model Files {
  id         String     @id @default(uuid())
  fileName   String     @db.VarChar(255)
  fileType   String     @db.VarChar(255)
  fileSize   Int
  filePath   String     @db.VarChar(255)
  encoding   String     @db.VarChar(255)
  Folder     Folders?   @relation(fields: [folderId], references: [id])
  folderId   String?
  Users      Users      @relation(fields: [usersId], references: [id])
  usersId    String
  AuditLog   AuditLog[]
  uploadedAt DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Permission {
  id             String           @id @default(uuid())
  permissionType PermissionType[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Users          Users?           @relation(fields: [usersId], references: [id])
  usersId        String?
}

enum PermissionType {
  READ
  WRITE
  DELETE
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}

model AuditLog {
  id        String   @id @default(uuid())
  action    Action
  fileId    String?
  file      Files?   @relation(fields: [fileId], references: [id])
  folderId  String?
  folder    Folders? @relation(fields: [folderId], references: [id])
  usersId   String
  users     Users    @relation(fields: [usersId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
